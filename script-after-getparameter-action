 //Is valid email?
        function isValidEmailAddress(emailAddress) {
            var pattern = new RegExp(/^(("[\w-+\s]+")|([\w-+]+(?:\.[\w-+]+)*)|("[\w-+\s]+")([\w-+]+(?:\.[\w-+]+)*))(@((?:[\w-+]+\.)*\w[\w-+]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][\d]\.|1[\d]{2}\.|[\d]{1,2}\.))((25[0-5]|2[0-4][\d]|1[\d]{2}|[\d]{1,2})\.){2}(25[0-5]|2[0-4][\d]|1[\d]{2}|[\d]{1,2})\]?$)/i);
            return pattern.test(emailAddress);
        }
        function validForm(form){
            // console.log('form',form);
            var error = 0;
            var fname = form.find("[name='fname']").val();
            // var phone = form.find("[name='phone']").val();
            var email = form.find("[name='email']").val();
            if(fname.length < 2){
                form.find("[name='fname']").addClass('error');
                $("span.fnameerror").show();
                error++;
            } else {
                form.find("[name='fname']").removeClass('error');
                $("span.fnameerror").hide();
            }

            // if (phone.match(/^(02|03|04|05|06|07|08|09)/)) {
            //     $("span.phoneerror").hide();
            //     if(phone.length < 9 || phone.length > 11) {
            //         $("span.phoneerror").show();
            //         form.find("[name='phone']").addClass('error');
            //         error++;
            //     } else {
            //         form.find("[name='phone']").removeClass('error');
            //         $("span.phoneerror").hide();
            //     }
            // } else {
            //     $("span.phoneerror").show();
            //     form.find("[name='phone']").addClass('error');
            //     error++;
            // }

            if( email != '' ){
                if ( !isValidEmailAddress( email ) ) {
                    form.find("[name='email']").addClass('error');
                    $("span.emailerror").show(); //error message
                    error++;
                } else {
                    form.find("[name='email']").removeClass('error');
                    $("span.emailerror").hide(); //error message
                }
            } else {
                form.find("[name='email']").addClass('error');
                $("span.emailerror").show(); //error message
                error++;
            }
            // console.log('accept',accept);
            // if($("[name='accept']").is(":checked")){
            //     $("span.accepterror").hide();
            // }else{
            //     $("span.accepterror").show();
            //     error++;
            // }
            // console.log('error',error);

            if(error > 0){
                return false;
            } else {
                return true;
            }
        }
        $('#newsletter-form').on('submit', function(e) {
            //e.preventDefault();
            console.log('e',e);
            console.log('dsd',validForm($(this)));
            if(!validForm($(this))) {
                e.preventDefault();
            }
        });
        if(getAllUrlParams().message == 'contact_us'){
            $('#thankyoumodal').modal();
            // alert(getAllUrlParams().message);
        }

        function getAllUrlParams(url) {

            // get query string from url (optional) or window
            var queryString = url ? url.split('?')[1] : window.location.search.slice(1);
          
            // we'll store the parameters here
            var obj = {};
          
            // if query string exists
            if (queryString) {
          
              // stuff after # is not part of query string, so get rid of it
              queryString = queryString.split('#')[0];
          
              // split our query string into its component parts
              var arr = queryString.split('&');
          
              for (var i = 0; i < arr.length; i++) {
                // separate the keys and the values
                var a = arr[i].split('=');
          
                // set parameter name and value (use 'true' if empty)
                var paramName = a[0];
                var paramValue = typeof (a[1]) === 'undefined' ? true : a[1];
          
                // (optional) keep case consistent
                paramName = paramName.toLowerCase();
                if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase();
          
                // if the paramName ends with square brackets, e.g. colors[] or colors[2]
                if (paramName.match(/\[(\d+)?\]$/)) {
          
                  // create key if it doesn't exist
                  var key = paramName.replace(/\[(\d+)?\]/, '');
                  if (!obj[key]) obj[key] = [];
          
                  // if it's an indexed array e.g. colors[2]
                  if (paramName.match(/\[\d+\]$/)) {
                    // get the index value and add the entry at the appropriate position
                    var index = /\[(\d+)\]/.exec(paramName)[1];
                    obj[key][index] = paramValue;
                  } else {
                    // otherwise add the value to the end of the array
                    obj[key].push(paramValue);
                  }
                } else {
                  // we're dealing with a string
                  if (!obj[paramName]) {
                    // if it doesn't exist, create property
                    obj[paramName] = paramValue;
                  } else if (obj[paramName] && typeof obj[paramName] === 'string'){
                    // if property does exist and it's a string, convert it to an array
                    obj[paramName] = [obj[paramName]];
                    obj[paramName].push(paramValue);
                  } else {
                    // otherwise add the property
                    obj[paramName].push(paramValue);
                  }
                }
              }
            }
          
            return obj;
        }
